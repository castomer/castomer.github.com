<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gc on Concurrent Work</title><link>https://www.concurrent.work/categories/gc/</link><description>Recent content in gc on www.concurrent.work</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>©Copyright | Concurrent work</copyright><lastBuildDate>Thu, 19 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://www.concurrent.work/categories/gc/index.xml" rel="self" type="application/rss+xml"/><item><title>容器(docker)中运行java需关注的几个小问题</title><link>https://www.concurrent.work/2018/07/19/pitfalls-about-running-java-inside-container/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>https://www.concurrent.work/2018/07/19/pitfalls-about-running-java-inside-container/</guid><description>
简介 container： 资源隔离、平台无关， 限制cpu、mem等资源
Java： 平台无关、Write once, run anywhere、WORA
java不知道自己运行在container里，以为它看到的资源都能用。结果：java …</description></item></channel></rss>