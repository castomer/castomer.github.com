<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jvm on Concurrent Work</title><link>http://concurrent.work/tags/jvm/</link><description>Recent content in jvm on concurrent.work</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>©Copyright | Concurrent work</copyright><lastBuildDate>Sun, 22 Jul 2018 00:00:00 +0000</lastBuildDate><atom:link href="http://concurrent.work/tags/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>深入jvm-2</title><link>http://concurrent.work/2018/07/22/deep-into-java-2/</link><pubDate>Sun, 22 Jul 2018 00:00:00 +0000</pubDate><guid>http://concurrent.work/2018/07/22/deep-into-java-2/</guid><description>
hello world程序会启动几个线程？ mkdir hello-world cd hello-world gradle init --type java-application cat src/main/java/App.java /* * This Java source …</description></item><item><title>深入jvm-1</title><link>http://concurrent.work/2018/07/20/deep-into-java-1/</link><pubDate>Fri, 20 Jul 2018 00:00:00 +0000</pubDate><guid>http://concurrent.work/2018/07/20/deep-into-java-1/</guid><description>
初探字节码与jvm public class Foo { public static void main(String[] args) { boolean flag = true; if (flag) { System.out.println("Hello, Java!"); } …</description></item><item><title>容器(docker)中运行java需关注的几个小问题</title><link>http://concurrent.work/2018/07/19/pitfalls-about-running-java-inside-container/</link><pubDate>Thu, 19 Jul 2018 00:00:00 +0000</pubDate><guid>http://concurrent.work/2018/07/19/pitfalls-about-running-java-inside-container/</guid><description>
简介 container： 资源隔离、平台无关， 限制cpu、mem等资源
Java： 平台无关、Write once, run anywhere、WORA
java不知道自己运行在container里，以为它看到的资源都能用。结果：java …</description></item><item><title>adoptopenjdk官方文档-进阶</title><link>http://concurrent.work/2015/09/01/adoptopenjdk-getting-started-advanced-steps/</link><pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate><guid>http://concurrent.work/2015/09/01/adoptopenjdk-getting-started-advanced-steps/</guid><description>
编译过程性能优化的命令行参数 AdoptOpenJDK wiki的一个链接，提供了几个怎么提高编译过程性能的例子。
编译 jcov 项目首页(项目信息, 编译指南, 其他…) …</description></item><item><title> 来自oracle labs 的虚拟机探索工具graal</title><link>http://concurrent.work/2015/07/18/graal-compiler-from-oracle-labs/</link><pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate><guid>http://concurrent.work/2015/07/18/graal-compiler-from-oracle-labs/</guid><description>
工作中 java 用的多一些， 难免想深入了解jvmn；搞下来 openjdk 8/9 的代码自己编译下，随便翻一翻，终究没啥大的收获。 前几天随意翻openjdk 文档，看到了个叫 graal的东西。就尝试搞一下看，能不能学点儿东西。
graal 是什么 一个使用 java 写 …</description></item></channel></rss>